/**
 * Copyright (c) 2008, Mohawk College of Applied Arts and Technology
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted 
 * provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright notice, this list of conditions 
 *       and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright notice, this list of 
 *       conditions and the following disclaimer in the documentation and/or other materials provided 
 *       with the distribution.
 *     * Neither the name of Mohawk College nor the names of its contributors may be used to endorse 
 *       or promote products derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED 
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR 
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED 
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE. 
 * 
 * Author: Justin Fyfe

 */


using System;
using System.Collections.Generic;
using System.Text;
using System.ComponentModel;
using System.Xml;

namespace MohawkCollege.EHR.Util.SimpleXSD
{
    /// <summary>
    /// The XmlSchemaElement class represents an XS:Element item
    /// </summary>
    [Description("xs:element")]
    public class XmlSchemaElement : XmlSchemaComplexContent
    {
        private XmlSchemaType type = null;

        /// <summary>
        /// Get the type of element this schema object represents
        /// </summary>
        [ReadOnly(true)]
        public XmlSchemaType SchemaType
        {
            get { return type; }
        }

        public override IEnumerator<XmlSchemaObject> GetEnumerator()
        {
            if(SchemaType is XmlSchemaSimpleType)
                return null;
            else
                return (SchemaType as XmlSchemaComplexType).Content.GetEnumerator();
            
        }

        /// <summary>
        /// Create a new instance of the XmlSchemaElement class
        /// </summary>
        public XmlSchemaElement(XmlSchemaSet schema, XmlSchemaObject parent) : base(schema, parent) { }

        /// <summary>
        /// Load this XmlSchema Element from a .net schema element
        /// </summary>
        /// <param name="element">The element to load from</param>
        public void Load(System.Xml.Schema.XmlSchemaElement element)
        {
            
            // Load base
            base.Load(element);

            this.Name = element.QualifiedName != null ? element.QualifiedName.Name : element.Name;
            this.Namespace = element.QualifiedName != null ? element.QualifiedName.Namespace : Schema.TargetNamespace; 
            this.MinOccurs = element.MinOccursString;
            this.MaxOccurs = element.MaxOccursString;

            // If Schema Type name is null, then that means the element defines an inline type
            if (element.SchemaType != null && element.SchemaType.Name != null)
                this.type = Schema.FindType(element.SchemaType.Name);
            else if(element.ElementSchemaType != null && element.ElementSchemaType.Name != null)
                this.type = Schema.FindType(element.ElementSchemaType.Name);
            else if(element.SchemaType != null)
            {
                Schema.CreateType(element.SchemaType, new XmlQualifiedName(this.Name, this.Namespace));
                this.type = Schema.FindType(element.SchemaType.Name);
                // Weird ...
                if (this.type == null)
                    this.type = Schema.FindType(element.SchemaType.Name);
                this.type.Documentation = "Autogenerated for element";
                this.type.Namespace = this.Namespace;
            }
        }

        public override int Length
        {
            get { return 0; }
        }
    }
}
